name: Deploy MSK Connectors

on:
  push:
    branches:
      - main
      - kacomia
    paths:
      - 'kafka-connect/plugins/connectors/teams/**/connector-config.json'
      - 'kafka-connect/base-config/base-infra-config.json'
      - '.github/scripts/merge-config.sh'
      - '.github/workflows/deploy-msk-connector.yml'

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      #      - name: Set up AWS Credentials
      #        uses: aws-actions/configure-aws-credentials@v2
      #        with:
      #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #          aws-region: ${{ env.AWS_REGION }}

      - name: Get changed plugin configs
        id: changes
        run: |
          echo "üîç Finding changed plugin configs..."

          mkdir -p tmp
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null \
            | grep 'kafka-connect/plugins/connectors/teams/.*/connector-config\.json' > changed.txt || true

          if [[ ! -s changed.txt ]]; then
            echo "Fallback to HEAD~1"
            git diff --name-only HEAD~1 HEAD \
              | grep 'kafka-connect/plugins/connectors/teams/.*/connector-config\.json' > changed.txt || true
          fi

          cat changed.txt || echo "No config changes found"

      - name: Show changed.txt contents
        run: |
          echo "üìù Contents of changed.txt:"
          cat changed.txt || echo "‚ùå No changes detected in plugin configs"

      - name: Prepare merge script
        run: |
          mkdir -p .github/scripts
          echo '#!/bin/bash
          set -e
          BASE_CONFIG=$1
          PLUGIN_CONFIG=$2
          MERGED_OUTPUT=$3
          CONNECTOR_NAME=$(jq -r ".connectorName" "$PLUGIN_CONFIG")
          CONNECTOR_CONFIGURATION=$(jq -c ".connectorConfiguration" "$PLUGIN_CONFIG")
          jq \
            --arg name "$CONNECTOR_NAME" \
            --argjson config "$CONNECTOR_CONFIGURATION" \
            ". + {connectorName: \$name, connectorConfiguration: \$config}" \
            "$BASE_CONFIG" > "$MERGED_OUTPUT"
          echo "‚úÖ Merged: $MERGED_OUTPUT"' > .github/scripts/merge-config.sh
          chmod +x .github/scripts/merge-config.sh

      - name: Merge configs
        run: |
          mkdir -p merged
          > merged-connectors.txt
          while read plugin_config; do
            [[ -z "$plugin_config" ]] && continue
            TEAM_NAME=$(basename "$(dirname "$plugin_config")")
            BASE_CONFIG="kafka-connect/base-config/base-infra-config.json"
            MERGED="merged/${TEAM_NAME}-merged.json"

            echo "üîß Merging for $TEAM_NAME"
            .github/scripts/merge-config.sh "$BASE_CONFIG" "$plugin_config" "$MERGED"

            echo "$MERGED" >> merged-connectors.txt
          done < changed.txt

      - name: Deploy merged configs
        run: |
          while read merged; do
            [[ -z "$merged" ]] && continue
            echo "üöÄ Deploying: $merged"

            CONNECTOR_NAME=$(jq -r '.connectorName' "$merged")

            echo "üîç Checking if $CONNECTOR_NAME exists..."
            set +e
            aws kafkaconnect describe-connector --connector-name "$CONNECTOR_NAME" > existing.json 2>/dev/null
            EXISTS=$?
            set -e

            echo "üîç Validating config..."
            aws kafkaconnect validate-connector-definition --cli-input-json file://"$merged" > /dev/null

            if [[ "$EXISTS" -eq 0 ]]; then
              echo "üîÅ Updating connector $CONNECTOR_NAME"
              CURRENT_VERSION=$(jq -r '.connectorDescription.currentVersion' existing.json)
              aws kafkaconnect update-connector \
                --connector-name "$CONNECTOR_NAME" \
                --current-version "$CURRENT_VERSION" \
                --capacity "$(jq -c '.capacity' "$merged")" \
                --connector-configuration "$(jq -c '.connectorConfiguration' "$merged")"
            else
              echo "üÜï Creating connector $CONNECTOR_NAME"
              aws kafkaconnect create-connector --cli-input-json file://"$merged"
            fi

            echo "üïí Waiting for connector to reach RUNNING state..."
            ATTEMPTS=30
            SLEEP=10

            for ((i=1; i<=ATTEMPTS; i++)); do
              STATUS=$(aws kafkaconnect describe-connector \
                --connector-name "$CONNECTOR_NAME" \
                --query 'connectorDescription.state' \
                --output text)

              echo "‚è±Ô∏è Attempt $i: Current state = $STATUS"

              if [[ "$STATUS" == "RUNNING" ]]; then
                echo "‚úÖ Connector is RUNNING!"
                break
              elif [[ "$STATUS" == "FAILED" || "$STATUS" == "DELETING" ]]; then
                echo "‚ùå Connector FAILED or is being DELETED!"
                exit 1
              fi

              sleep $SLEEP
            done

            if [[ "$STATUS" != "RUNNING" ]]; then
              echo "‚ùå Timeout: Connector did not reach RUNNING state within expected time."
              exit 1
            fi

            echo "üìã Final connector description for $CONNECTOR_NAME:"
            aws kafkaconnect describe-connector --connector-name "$CONNECTOR_NAME"
            echo ""
          done < merged-connectors.txt
